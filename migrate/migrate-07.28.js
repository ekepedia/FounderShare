/*
 * Copyright (c) 2015 TopCoder, Inc. All rights reserved.
 */

/**
 * Migration script for assembly http://community.topcoder.com/tc?module=ProjectDetail&pj=30050632&tab=results
 * 
 * 
 * This script fixes following fields:
 * - GiftCard: readableId, originalQuantity, isGift
 * - Business: giftCardSeq
 * - ActionRecord: remove text from `details` (e.g. 'Purchase $20') and keep only amount (e.g. '$20')
 * fix metadata field (it must contain associated gift card and gift card offer)
 * 
 * All business that are generated by test data are removed.
 * 
 * @author TCSASSEMBLER
 * @version 1.0
 */
"use strict";

require("../src/common/function-utils");
var Const = require("../src/Const");
var _ = require('underscore');
var async = require('async');
var User = require('../src/models').User;
var ActionRecord = require('../src/models').ActionRecord;
var GiftCard = require('../src/models').GiftCard;
var GiftCardOffer = require('../src/models').GiftCardOffer;
var GiftCardGift = require('../src/models').GiftCardGift;
var Business = require('../src/models').Business;



function removeMockBusiness(callback) {
    async.waterfall([
        function (cb) {
            Business.find({}, cb);
        }, function (businesses, cb) {
            async.forEach(businesses, function (business, cb) {
                if (!business.braintreeAccountId || business.braintreeAccountId.indexOf("fake_business") === -1) {
                    return cb();
                }
                console.log("removing business: ", business.name, business.id);
                async.parallel({
                    GiftCard: function (cb) {
                        GiftCard.remove({businessId: business.id}, cb);
                    },
                    GiftCardOffer: function (cb) {
                        GiftCardOffer.remove({businessId: business.id}, cb);
                    },
                    ActionRecord: function (cb) {
                        ActionRecord.remove({businessId: business.id}, cb);
                    }
                }, cb)
            }, cb);
        }
    ], callback);
}

//fix GiftCard#originalQuantity
function fixOriginalQuantity(callback) {
    async.waterfall([
        function (cb) {
            async.parallel({
                giftCards: function (cb) {
                    GiftCard.find({}, cb);
                },
                gifts: function (cb) {
                    GiftCardGift.find({
                        status: {
                            //other statuses are refunded to gift card
                            $in: [Const.GiftCardGiftStatus.ACCEPTED, Const.GiftCardGiftStatus.PENDING]
                        }
                    }, cb);
                }
            }, cb);
        }, function (result, cb) {
            var giftCards = result.giftCards;
            var gifts = result.gifts;
            async.forEachSeries(giftCards, function (giftCard, cb) {
                var originalQuantity = giftCard.quantity;
                _.each(giftCard.giftCardRedeems, function (redeem) {
                    originalQuantity += redeem.amount
                });
                var associatedGifts = _.filter(gifts, function (gift) {
                    return gift.sourceGiftCardId == giftCard.id;
                });
                _.each(associatedGifts, function (gift) {
                    originalQuantity += gift.quantity;
                });
                giftCard.originalQuantity = originalQuantity;
                if (!giftCard.readableId) {
                    giftCard.readableId = "tmp";//fixed in next step
                }
                giftCard.save(cb);
            }, cb);
        }
    ], function (err) {
        if (err) {
            console.log("fixOriginalQuantity error")
        } else {
            console.log("fixOriginalQuantity done")
        }
        callback(err);
    });
}


//fix GiftCard#readableId and Business#giftCardSeq
function fixReadableIds(callback) {
    async.waterfall([
        function (cb) {
            Business.find({}, cb);
        }, function (result, cb) {
            async.forEach(result, function (business, cb) {
                var seqNumber = 0;
                async.waterfall([
                    function (cb) {
                        GiftCard.find({businessId: business.id}, cb);
                    }, function (giftCards, cb) {
                        if (!giftCards.length)  {
                            return cb();
                        }
                        var idPrefix = business.name.toUpperCase().replace(/ /g, "_") + "_";
                        async.forEachSeries(giftCards, function (giftCard, cb) {
                            seqNumber++;
                            giftCard.readableId = idPrefix+ seqNumber;
                            giftCard.save(cb);
                        }, cb);
                    }
                ], cb.wrap(function () {
                    business.giftCardSeq = seqNumber;
                    business.save(cb);
                }))
            }, cb);
        }
    ], function (err) {
        if (err) {
            console.log("fixReadableIds error")
        } else {
            console.log("fixReadableIds done")
        }
        callback(err);
    });
}

//fix GiftCard#isGift
function fixIsGift(callback) {
    async.waterfall([
        function (cb) {
            async.parallel({
                giftCards: function (cb) {
                    GiftCard.find({}, cb);
                },
                gifts: function (cb) {
                    GiftCardGift.find({}, cb);
                }
            }, cb);
        }, function (result, cb) {
            var map = {};
            _.each(result.gifts, function (gift) {
                if (gift.targetGiftCardId) {
                    map[gift.targetGiftCardId] = true;
                }
            });
            async.forEach(result.giftCards, function (giftCard, cb) {
                if (map[giftCard.id]) {
                    giftCard.isGift = true;
                }
                giftCard.save(cb);
            }, cb);
        }
    ], function (err) {
        if (err) {
            console.log("fixIsGift error")
        } else {
            console.log("fixIsGift done")
        }
        callback(err);
    });
}

//fix ActionRecord.details
function fixDetailsText(callback) {
    async.waterfall([
        function (cb) {
            ActionRecord.find({}, cb);
        }, function (records, cb) {
            async.forEach(records, function (record, cb) {
                record.details = record.details.replace("Purchased ", "").replace("Redeemed ", "");
                record.save(cb);
            }, cb);
        }
    ], function (err) {
        if (err) {
            console.log("fixDetailsText error")
        } else {
            console.log("fixDetailsText done")
        }
        callback(err);
    });
}

//fix ActionRecord.details
function fixActionRecordMetadata(callback) {
    
    async.waterfall([
        function (cb) {
            ActionRecord.find({}, cb);
        }, function (records, cb) {
            async.series({
                GIFT_CARD_PURCHASE: function (cb) {
                    var map = {};
                    var filtered = _.where(records, {type: Const.ActionType.GIFT_CARD_PURCHASE});
                    async.forEachSeries(filtered, function (record, cb) {
                        async.waterfall([
                            function (cb) {
                                GiftCard.find({
                                    ownerId: record.userId,
                                    businessId: record.businessId,
                                    createdOn: {$lte: record.timestamp}
                                })
                                .sort({createdOn: -1})
                                .limit(1)
                                .exec(cb);
                            }, function (giftCards, cb) {
                                var giftCard = giftCards[0];
                                console.log("GIFT_CARD_PURCHASE", giftCard.id, record.timestamp - giftCard.createdOn);
                                if (map[giftCard.id]) {
                                    console.log("ALREADY_PURCHASED", giftCard.id);
                                    return cb(new Error("ALREADY_PURCHASED"));
                                }
                                map[giftCard.id] = true;
                                record.metadata = {
                                    giftCardId: giftCard.id,
                                    giftCardOfferId: giftCard.giftCardOfferId
                                };
                                record.save(cb);
                            }
                        ], cb);
                    }, cb);
                },
                GIFT_CARD_REDEMPTION: function (cb) {
                    var filtered = _.where(records, {type: Const.ActionType.GIFT_CARD_REDEMPTION});
                    async.forEachSeries(filtered, function (record, cb) {
                        async.waterfall([
                            function (cb) {
                                GiftCard.find({
                                    ownerId: record.userId,
                                    businessId: record.businessId
                                }, cb);
                            }, function (giftCards, cb) {
                                var giftCard = null;
                                var bestDiff = 1e10;
                                _.each(giftCards, function (card) {
                                    _.each(card.giftCardRedeems, function (redeem) {
                                        var diff = record.timestamp - redeem.timestamp;
                                        if ('$' + redeem.amount.toFixed(2) === record.details &&
                                            diff > 0 && 
                                            diff < bestDiff) {
                                                bestDiff = diff;
                                                giftCard = card;
                                        }
                                    });
                                });
                                console.log("GIFT_CARD_REDEMPTION", giftCard.id, bestDiff);
                                record.metadata = {
                                    giftCardId: giftCard.id,
                                    giftCardOfferId: giftCard.giftCardOfferId
                                };
                                record.save(cb);
                            }
                        ], cb);
                    }, cb);
                },
                GIFT_CARD_GIFTED: function (cb) {
                    var filtered = _.where(records, {type: Const.ActionType.GIFT_CARD_GIFTED});
                    var map = {};
                    async.forEachSeries(filtered, function (record, cb) {
                        async.waterfall([
                            function (cb) {
                                GiftCardGift.find({
                                    createdAt: {$lte: record.timestamp}
                                })
                                    .sort({createdAt: -1})
                                    .limit(1)
                                    .exec(cb);
                            }, function (gifts, cb) {
                                var gift = gifts[0];
                                console.log("GIFT_CARD_GIFTED", gift.id, record.timestamp - gift.createdAt);
                                if (map[gift.id]) {
                                    console.log("ALREADY_GIFTED", gift.id);
                                    return cb(new Error("ALREADY_GIFTED"));
                                }
                                map[gift.id] = true;
                                GiftCard.findById(gift.sourceGiftCardId, cb.wrap(function (giftCard) {
                                    record.metadata = {
                                        giftCardId: giftCard.id,
                                        giftCardOfferId: giftCard.giftCardOfferId
                                    };
                                    record.save(cb);
                                }));
                            }
                        ], cb);
                    }, cb);
                },
                GIFT_CARD_GIFT_ACCEPTED: function (cb) {
                    var filtered = _.where(records, {type: Const.ActionType.GIFT_CARD_GIFT_ACCEPTED});
                    var map = {};
                    async.forEachSeries(filtered, function (record, cb) {
                        async.waterfall([
                            function (cb) {
                                GiftCard.find({
                                    isGift: true,
                                    createdOn: {$lte: record.timestamp}
                                })
                                    .sort({createdOn: -1})
                                    .limit(1)
                                    .exec(cb);
                            }, function (giftCards, cb) {
                                var giftCard = giftCards[0];
                                console.log("GIFT_CARD_GIFT_ACCEPTED", giftCard.id, record.timestamp - giftCard.createdOn);
                                if (map[giftCard.id]) {
                                    console.log("ALREADY_ACCEPTED", giftCard.id);
                                    return cb(new Error("ALREADY_ACCEPTED"));
                                }
                                map[giftCard.id] = true;
                                record.metadata = {
                                    giftCardId: giftCard.id,
                                    giftCardOfferId: giftCard.giftCardOfferId
                                };
                                record.save(cb);
                            }
                        ], cb);
                    }, cb);
                }
            }, cb);
        }
    ], function (err) {
        if (err) {
            console.log("fixActionRecordMetadata error")
        } else {
            console.log("fixActionRecordMetadata done")
        }
        callback(err);
    });
}

async.series([
    removeMockBusiness,
    fixOriginalQuantity,
    fixReadableIds,
    fixIsGift,
    fixDetailsText,
    fixActionRecordMetadata
], function (err) {
    if (err) {
        console.log(err);
        throw err;
    }
    console.log("\nSUCCESS");
    process.exit();
});